namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.w3.org/1999/xhtml"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
default namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"
namespace xi = "http://www.w3.org/2001/XInclude"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2021-03-18T23:39:55Z. .
# TEI Edition: Version 4.0.0. Last updated on
#	13th February 2020, revision ccd19b0ba
# TEI Edition Location: http://www.tei-c.org/Vault/P5/Version 4.0.0/
#

# TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages which treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of TEI content in a software environment. For further information or clarification, please contact the TEI Consortium (info@tei-c.org).
macro.paraContent =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.global
   | model.lLike)*
macro.limitedContent = (text | model.limitedPhrase | model.inter)*
macro.phraseSeq =
  (text | model.gLike | model.qLike | model.phrase | model.global)*
macro.phraseSeq.limited = (text | model.limitedPhrase | model.global)*
macro.specialPara =
  (text
   | model.gLike
   | model.phrase
   | model.inter
   | model.divPart
   | model.global)*
macro.xtext = (text | model.gLike)*
att.canonical.attributes =
  att.canonical.attribute.key, att.canonical.attribute.ref
att.canonical.attribute.key =
  
  ## provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind.
  attribute key { xsd:string }?
att.canonical.attribute.ref =
  
  ## (reference) provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.
  attribute ref {
    list { xsd:anyURI+ }
  }?
att.ranging.attributes =
  att.ranging.attribute.atLeast,
  att.ranging.attribute.atMost,
  att.ranging.attribute.min,
  att.ranging.attribute.max,
  att.ranging.attribute.confidence
att.ranging.attribute.atLeast =
  
  ## gives a minimum estimated value for the approximate measurement.
  attribute atLeast {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.ranging.attribute.atMost =
  
  ## gives a maximum estimated value for the approximate measurement.
  attribute atMost {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.ranging.attribute.min =
  
  ## where the measurement summarizes more than one observation or a range, supplies the minimum value observed.
  attribute min {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.ranging.attribute.max =
  
  ## where the measurement summarizes more than one observation or a range, supplies the maximum value observed.
  attribute max {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.ranging.attribute.confidence =
  [
    a:documentation [
      "specifies the degree of statistical confidence (between zero and one) that a value falls within the range specified by "
      ns1:code [ "@min" ]
      " and "
      ns1:code [ "@max" ]
      ", or the proportion of observed values that fall within that range."
    ]
  ]
  attribute confidence { xsd:double }?
att.dimensions.attributes =
  att.ranging.attributes,
  att.dimensions.attribute.unit,
  att.dimensions.attribute.quantity,
  att.dimensions.attribute.extent,
  att.dimensions.attribute.precision,
  att.dimensions.attribute.scope
att.dimensions.attribute.unit =
  
  ## names the unit used for the measurement
  ## Suggested values include: 1] cm (centimetres); 2] mm (millimetres); 3] in (inches); 4] line; 5] char (characters)
  attribute unit {
    
    ## (centimetres) 
    "cm"
    | 
      ## (millimetres) 
      "mm"
    | 
      ## (inches) 
      "in"
    | 
      ## lines of text
      "line"
    | 
      ## (characters) characters of text
      "char"
    | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.dimensions.attribute.quantity =
  
  ## specifies the length in the units specified
  attribute quantity {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.dimensions.attribute.extent =
  
  ## indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words.
  attribute extent { xsd:string }?
att.dimensions.attribute.precision =
  
  ## characterizes the precision of the values specified by the other attributes.
  attribute precision {
    
    ##
    "high"
    | 
      ##
      "medium"
    | 
      ##
      "low"
    | 
      ##
      "unknown"
  }?
att.dimensions.attribute.scope =
  
  ## where the measurement summarizes more than one observation, specifies the applicability of this measurement.
  ## Sample values include: 1] all; 2] most; 3] range
  attribute scope {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.written.attributes = att.written.attribute.hand
att.written.attribute.hand =
  [
    a:documentation [
      "points to a "
      ns1:code [ "<handNote>" ]
      " element describing the hand considered responsible for the content of the element concerned."
    ]
  ]
  attribute hand { xsd:anyURI }?
att.damaged.attributes =
  att.dimensions.attributes,
  att.written.attributes,
  att.damaged.attribute.agent,
  att.damaged.attribute.degree,
  att.damaged.attribute.group
att.damaged.attribute.agent =
  
  ## categorizes the cause of the damage, if it can be identified.
  ## Sample values include: 1] rubbing; 2] mildew; 3] smoke
  attribute agent {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.damaged.attribute.degree =
  [
    a:documentation [
      "provides a coded representation of the degree of damage, either as a number between 0 (undamaged) and 1 (very extensively damaged), or as one of the codes high, medium, low, or unknown. The "
      ns1:code [ "<damage>" ]
      " element with the "
      ns1:code [ "@degree" ]
      " attribute should only be used where the text may be read with some confidence; text supplied from other sources should be tagged as "
      ns1:code [ "<supplied>" ]
      "."
    ]
  ]
  attribute degree {
    xsd:double
    | (
       ##
       "high"
       | 
         ##
         "medium"
       | 
         ##
         "low"
       | 
         ##
         "unknown")
  }?
att.damaged.attribute.group =
  
  ## assigns an arbitrary number to each stretch of damage regarded as forming part of the same physical phenomenon.
  attribute group { xsd:nonNegativeInteger }?
att.breaking.attributes = att.breaking.attribute.break
att.breaking.attribute.break =
  
  ## indicates whether or not the element bearing this attribute should be considered to mark the end of an orthographic token in the same way as whitespace.
  attribute break {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.datable.w3c.attributes =
  att.datable.w3c.attribute.when,
  att.datable.w3c.attribute.notBefore,
  att.datable.w3c.attribute.notAfter,
  att.datable.w3c.attribute.from,
  att.datable.w3c.attribute.to
att.datable.w3c.attribute.when =
  
  ## supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd.
  attribute when {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.datable.w3c.attribute.notBefore =
  
  ## specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notBefore {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.datable.w3c.attribute.notAfter =
  
  ## specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notAfter {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.datable.w3c.attribute.from =
  
  ## indicates the starting point of the period in standard form, e.g. yyyy-mm-dd.
  attribute from {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.datable.w3c.attribute.to =
  
  ## indicates the ending point of the period in standard form, e.g. yyyy-mm-dd.
  attribute to {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
sch:pattern [
  id = "harambee-att.datable.w3c-att-datable-w3c-when-constraint-rule-1"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@when]"
    "\x{a}" ~
    "         "
    sch:report [
      test = "@notBefore|@notAfter|@from|@to"
      role = "nonfatal"
      "The @when attribute cannot be used with any other att.datable.w3c attributes."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "harambee-att.datable.w3c-att-datable-w3c-from-constraint-rule-2"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@from]"
    "\x{a}" ~
    "         "
    sch:report [
      test = "@notBefore"
      role = "nonfatal"
      "The @from and @notBefore attributes cannot be used together."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "harambee-att.datable.w3c-att-datable-w3c-to-constraint-rule-3"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@to]"
    "\x{a}" ~
    "         "
    sch:report [
      test = "@notAfter"
      role = "nonfatal"
      "The @to and @notAfter attributes cannot be used together."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.datable.attributes =
  att.datable.w3c.attributes,
  att.datable.iso.attributes,
  att.datable.custom.attributes,
  att.datable.attribute.calendar,
  att.datable.attribute.period
att.datable.attribute.calendar =
  
  ## indicates the system or calendar to which the date represented by the content of this element belongs.
  attribute calendar { xsd:anyURI }?
sch:pattern [
  id = "harambee-att.datable-calendar-calendar-constraint-rule-4"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@calendar]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "string-length(.) gt 0"
      " @calendar indicates the system or calendar to\x{a}" ~
      "              which the date represented by the content of this element belongs, but this\x{a}" ~
      "              "
      sch:name [ ]
      " element has no textual content."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.datable.attribute.period =
  
  ## supplies a pointer to some location defining a named period of time within which the datable item is understood to have occurred.
  attribute period { xsd:anyURI }?
att.declarable.attributes = att.declarable.attribute.default
att.declarable.attribute.default =
  
  ## indicates whether or not this element is selected by default when its parent is selected.
  [ a:defaultValue = "false" ]
  attribute default {
    
    ## This element is selected if its parent is selected
    "true"
    | 
      ## This element can only be selected explicitly, unless it is the only one of its kind, in which case it is selected if its parent is selected.
      "false"
  }?
att.declaring.attributes = att.declaring.attribute.decls
att.declaring.attribute.decls =
  
  ## identifies one or more declarable elements within the header, which are understood to apply to the element bearing this attribute and its content.
  attribute decls {
    list { xsd:anyURI+ }
  }?
att.fragmentable.attributes = att.fragmentable.attribute.part
att.fragmentable.attribute.part =
  
  ## specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers.
  [ a:defaultValue = "N" ]
  attribute part {
    
    ## (yes) the element is fragmented in some (unspecified) respect
    "Y"
    | 
      ## (no) the element is not fragmented, or no claim is made as to its completeness
      "N"
    | 
      ## (initial) this is the initial part of a fragmented element
      "I"
    | 
      ## (medial) this is a medial part of a fragmented element
      "M"
    | 
      ## (final) this is the final part of a fragmented element
      "F"
  }?
att.divLike.attributes =
  att.fragmentable.attributes,
  att.divLike.attribute.org,
  att.divLike.attribute.sample
att.divLike.attribute.org =
  
  ## (organization) specifies how the content of the division is organized.
  [ a:defaultValue = "uniform" ]
  attribute org {
    
    ## no claim is made about the sequence in which the immediate contents of this division are to be processed, or their inter-relationships.
    "composite"
    | 
      ## the immediate contents of this element are regarded as forming a logical unit, to be processed in sequence.
      "uniform"
  }?
att.divLike.attribute.sample =
  
  ## indicates whether this division is a sample of the original source and if so, from which part.
  [ a:defaultValue = "complete" ]
  attribute sample {
    
    ## division lacks material present at end in source.
    "initial"
    | 
      ## division lacks material at start and end.
      "medial"
    | 
      ## division lacks material at start.
      "final"
    | 
      ## position of sampled material within original unknown.
      "unknown"
    | 
      ## division is not a sample.
      "complete"
  }?
att.docStatus.attributes = att.docStatus.attribute.status
att.docStatus.attribute.status =
  
  ## describes the status of a document either currently or, when associated with a dated element, at the time indicated.
  ## Sample values include: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn
  [ a:defaultValue = "draft" ]
  attribute status {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.global.responsibility.attributes =
  att.global.responsibility.attribute.cert,
  att.global.responsibility.attribute.resp
att.global.responsibility.attribute.cert =
  
  ## (certainty) signifies the degree of certainty associated with the intervention or interpretation.
  attribute cert {
    xsd:double
    | (
       ##
       "high"
       | 
         ##
         "medium"
       | 
         ##
         "low"
       | 
         ##
         "unknown")
  }?
att.global.responsibility.attribute.resp =
  
  ## (responsible party) indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber.
  attribute resp {
    list { xsd:anyURI+ }
  }?
att.editLike.attributes =
  att.editLike.attribute.evidence, att.editLike.attribute.instant
att.editLike.attribute.evidence =
  
  ## indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation.
  ## Suggested values include: 1] internal; 2] external; 3] conjecture
  attribute evidence {
    list {
      (
       ## there is internal evidence to support the intervention.
       "internal"
       | 
         ## there is external evidence to support the intervention.
         "external"
       | 
         ## the intervention or interpretation has been made by the editor, cataloguer, or scholar on the basis of their expertise.
         "conjecture"
       | xsd:token { pattern = "[^\p{C}\p{Z}]+" })+
    }
  }?
att.editLike.attribute.instant =
  
  ## indicates whether this is an instant revision or not.
  [ a:defaultValue = "false" ]
  attribute instant {
    xsd:boolean
    | (
       ##
       "unknown"
       | 
         ##
         "inapplicable")
  }?
att.global.rendition.attributes =
  att.global.rendition.attribute.rend,
  att.global.rendition.attribute.style,
  att.global.rendition.attribute.rendition
att.global.rendition.attribute.rend =
  
  ## (rendition) indicates how the element in question was rendered or presented in the source text.
  attribute rend {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.global.rendition.attribute.style =
  
  ## contains an expression in some formal style definition language which defines the rendering or presentation used for this element in the source text
  attribute style { xsd:string }?
att.global.rendition.attribute.rendition =
  
  ## points to a description of the rendering or presentation used for this element in the source text.
  attribute rendition {
    list { xsd:anyURI+ }
  }?
att.global.source.attributes = att.global.source.attribute.source
att.global.source.attribute.source =
  
  ## specifies the source from which some aspect of this element is drawn.
  attribute source {
    list { xsd:anyURI+ }
  }?
att.global.attributes =
  att.global.rendition.attributes,
  att.global.linking.attributes,
  att.global.facs.attributes,
  att.global.change.attributes,
  att.global.responsibility.attributes,
  att.global.source.attributes,
  att.global.attribute.xmlid,
  att.global.attribute.n,
  att.global.attribute.xmllang,
  att.global.attribute.xmlbase,
  att.global.attribute.xmlspace
att.global.attribute.xmlid =
  
  ## (identifier) provides a unique identifier for the element bearing the attribute.
  attribute xml:id { xsd:ID }?
att.global.attribute.n =
  
  ## (number) gives a number (or other label) for an element, which is not necessarily unique within the document.
  attribute n { xsd:string }?
att.global.attribute.xmllang =
  [
    a:documentation [
      "(language) indicates the language of the element content using a tag generated according to "
      ns1:a [
        href = "http://www.rfc-editor.org/rfc/bcp/bcp47.txt"
        "BCP 47"
      ]
      "."
    ]
  ]
  attribute xml:lang {
    xsd:language
    | (
       ##
       "")
  }?
att.global.attribute.xmlbase =
  
  ## provides a base URI reference with which applications can resolve relative URI references into absolute URI references.
  attribute xml:base { xsd:anyURI }?
att.global.attribute.xmlspace =
  
  ## signals an intention about how white space should be managed by applications.
  attribute xml:space {
    
    ## signals that the application's default white-space processing modes are acceptable
    "default"
    | 
      ## indicates the intent that applications preserve all white space
      "preserve"
  }?
att.handFeatures.attributes =
  att.handFeatures.attribute.scribe,
  att.handFeatures.attribute.scribeRef,
  att.handFeatures.attribute.script,
  att.handFeatures.attribute.scriptRef,
  att.handFeatures.attribute.medium,
  att.handFeatures.attribute.scope
att.handFeatures.attribute.scribe =
  
  ## gives a name or other identifier for the scribe believed to be responsible for this hand.
  attribute scribe { xsd:Name }?
att.handFeatures.attribute.scribeRef =
  [
    a:documentation [
      "points to a full description of the scribe concerned, typically supplied by a "
      ns1:code [ "<person>" ]
      " element elsewhere in the description."
    ]
  ]
  attribute scribeRef {
    list { xsd:anyURI+ }
  }?
att.handFeatures.attribute.script =
  
  ## characterizes the particular script or writing style used by this hand, for example secretary, copperplate, Chancery, Italian, etc.
  attribute script {
    list { xsd:Name+ }
  }?
att.handFeatures.attribute.scriptRef =
  [
    a:documentation [
      "points to a full description of the script or writing style used by this hand, typically supplied by a "
      ns1:code [ "<scriptNote>" ]
      " element elsewhere in the description."
    ]
  ]
  attribute scriptRef {
    list { xsd:anyURI+ }
  }?
att.handFeatures.attribute.medium =
  
  ## describes the tint or type of ink, e.g. brown, or other writing medium, e.g. pencil
  attribute medium {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.handFeatures.attribute.scope =
  
  ## specifies how widely this hand is used in the manuscript.
  attribute scope {
    
    ## only this hand is used throughout the manuscript
    "sole"
    | 
      ## this hand is used through most of the manuscript
      "major"
    | 
      ## this hand is used occasionally in the manuscript
      "minor"
  }?
att.internetMedia.attributes = att.internetMedia.attribute.mimeType
att.internetMedia.attribute.mimeType =
  
  ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
  attribute mimeType {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.media.attributes =
  att.internetMedia.attributes,
  att.media.attribute.width,
  att.media.attribute.height,
  att.media.attribute.scale
att.media.attribute.width =
  
  ## Where the media are displayed, indicates the display width
  attribute width {
    xsd:token {
      pattern =
        "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
    }
  }?
att.media.attribute.height =
  
  ## Where the media are displayed, indicates the display height
  attribute height {
    xsd:token {
      pattern =
        "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
    }
  }?
att.media.attribute.scale =
  
  ## Where the media are displayed, indicates a scale factor to be applied when generating the desired display size
  attribute scale {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.resourced.attributes = att.resourced.attribute.url
att.resourced.attribute.url =
  
  ## (uniform resource locator) specifies the URL from which the media concerned may be obtained.
  attribute url { xsd:anyURI }
att.naming.attributes =
  att.canonical.attributes,
  att.naming.attribute.role,
  att.naming.attribute.nymRef
att.naming.attribute.role =
  
  ## may be used to specify further information about the entity referenced by this name in the form of a set of whitespace-separated values, for example the occupation of a person, or the status of a place.
  attribute role {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.naming.attribute.nymRef =
  
  ## (reference to the canonical name) provides a means of locating the canonical form (nym) of the names associated with the object named by the element bearing it.
  attribute nymRef {
    list { xsd:anyURI+ }
  }?
att.notated.attributes = att.notated.attribute.notation
att.notated.attribute.notation =
  
  ## names the notation used for the content of the element.
  attribute notation {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.placement.attributes = att.placement.attribute.place
att.placement.attribute.place =
  
  ## specifies where this item is placed.
  ## Suggested values include: 1] below; 2] bottom; 3] margin; 4] top; 5] opposite; 6] overleaf; 7] above; 8] end; 9] inline; 10] inspace
  attribute place {
    list {
      (
       ## below the line
       "below"
       | 
         ## at the foot of the page
         "bottom"
       | 
         ## in the margin (left, right, or both)
         "margin"
       | 
         ## at the top of the page
         "top"
       | 
         ## on the opposite, i.e. facing, page
         "opposite"
       | 
         ## on the other side of the leaf
         "overleaf"
       | 
         ## above the line
         "above"
       | 
         ## at the end of e.g. chapter or volume.
         "end"
       | 
         ## within the body of the text.
         "inline"
       | 
         ## in a predefined space, for example left by an earlier scribe.
         "inspace"
       | xsd:token { pattern = "[^\p{C}\p{Z}]+" })+
    }
  }?
att.typed.attributes =
  att.typed.attribute.type, att.typed.attribute.subtype
att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient classification scheme or typology.
  attribute type {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.typed.attribute.subtype =
  
  ## provides a sub-categorization of the element, if needed
  attribute subtype {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
sch:pattern [
  id = "harambee-att.typed-subtypeTyped-constraint-rule-5"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@subtype]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@type"
      "The "
      sch:name [ ]
      " element should not be categorized in detail with @subtype unless also categorized in general with @type"
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.pointing.attributes =
  att.pointing.attribute.targetLang,
  att.pointing.attribute.target,
  att.pointing.attribute.evaluate
att.pointing.attribute.targetLang =
  [
    a:documentation [
      "specifies the language of the content to be found at the destination referenced by "
      ns1:code [ "@target" ]
      ", using a language tag generated according to "
      ns1:a [
        href = "http://www.rfc-editor.org/rfc/bcp/bcp47.txt"
        "BCP 47"
      ]
      "."
    ]
  ]
  attribute targetLang {
    xsd:language
    | (
       ##
       "")
  }?
sch:pattern [
  id = "harambee-att.pointing-targetLang-targetLang-constraint-rule-6"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[not(self::tei:schemaSpec)][@targetLang]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@target"
      "@targetLang should only be used on "
      sch:name [ ]
      " if @target is specified."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.pointing.attribute.target =
  
  ## specifies the destination of the reference by supplying one or more URI References
  attribute target {
    list { xsd:anyURI+ }
  }?
att.pointing.attribute.evaluate =
  
  ## specifies the intended meaning when the target of a pointer is itself a pointer.
  attribute evaluate {
    
    ## if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.
    "all"
    | 
      ## if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.
      "one"
    | 
      ## no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.
      "none"
  }?
att.sortable.attributes = att.sortable.attribute.sortKey
att.sortable.attribute.sortKey =
  
  ## supplies the sort key for this element in an index, list or group which contains it.
  attribute sortKey {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.edition.attributes =
  att.edition.attribute.ed, att.edition.attribute.edRef
att.edition.attribute.ed =
  
  ## (edition) supplies a sigil or other arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute ed {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.edition.attribute.edRef =
  
  ## (edition reference) provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute edRef {
    list { xsd:anyURI+ }
  }?
att.spanning.attributes = att.spanning.attribute.spanTo
att.spanning.attribute.spanTo =
  
  ## indicates the end of a span initiated by the element bearing this attribute.
  attribute spanTo { xsd:anyURI }?
sch:pattern [
  id = "harambee-att.spanning-spanTo-spanTo-2-constraint-rule-7"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@spanTo]"
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "id(substring(@spanTo,2)) and following::*[@xml:id=substring(current()/@spanTo,2)]"
      "\x{a}" ~
      "The element indicated by @spanTo ("
      sch:value-of [ select = "@spanTo" ]
      ") must follow the current element "
      sch:name [ ]
      "\x{a}" ~
      "         "
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.transcriptional.attributes =
  att.editLike.attributes,
  att.written.attributes,
  att.transcriptional.attribute.status,
  att.transcriptional.attribute.cause,
  att.transcriptional.attribute.seq
att.transcriptional.attribute.status =
  
  ## indicates the effect of the intervention, for example in the case of a deletion, strikeouts which include too much or too little text, or in the case of an addition, an insertion which duplicates some of the text already present.
  ## Sample values include: 1] duplicate; 2] duplicate-partial; 3] excessStart; 4] excessEnd; 5] shortStart; 6] shortEnd; 7] partial; 8] unremarkable
  [ a:defaultValue = "unremarkable" ]
  attribute status {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.transcriptional.attribute.cause =
  
  ## documents the presumed cause for the intervention.
  attribute cause {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.transcriptional.attribute.seq =
  
  ## (sequence) assigns a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.
  attribute seq { xsd:nonNegativeInteger }?
att.translatable.attributes = att.translatable.attribute.versionDate
att.translatable.attribute.versionDate =
  
  ## specifies the date on which the source text was extracted and sent to the translator
  attribute versionDate {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
  }?
att.citing.attributes =
  att.citing.attribute.unit,
  att.citing.attribute.from,
  att.citing.attribute.to
att.citing.attribute.unit =
  
  ## identifies the unit of information conveyed by the element, e.g. columns, pages, volume, entry.
  ## Suggested values include: 1] volume; 2] issue; 3] page; 4] line; 5] chapter; 6] part; 7] column; 8] entry
  attribute unit {
    
    ## the element contains a volume number.
    "volume"
    | 
      ## the element contains an issue number, or volume and issue numbers.
      "issue"
    | 
      ## the element contains a page number or page range.
      "page"
    | 
      ## the element contains a line number or line range.
      "line"
    | 
      ## the element contains a chapter indication (number and/or title)
      "chapter"
    | 
      ## the element identifies a part of a book or collection.
      "part"
    | 
      ## the element identifies a column.
      "column"
    | 
      ## the element identifies an entry number or label in a list of entries.
      "entry"
    | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.citing.attribute.from =
  [
    a:documentation [
      "specifies the starting point of the range of units indicated by the "
      ns1:code [ "@unit" ]
      " attribute."
    ]
  ]
  attribute from {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
att.citing.attribute.to =
  [
    a:documentation [
      "specifies the end-point of the range of units indicated by the "
      ns1:code [ "@unit" ]
      " attribute."
    ]
  ]
  attribute to {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
model.nameLike.agent = name | orgName | persName
model.nameLike.agent_alternation = name | orgName | persName
model.nameLike.agent_sequence = name, orgName, persName
model.nameLike.agent_sequenceOptional = name?, orgName?, persName?
model.nameLike.agent_sequenceOptionalRepeatable =
  name*, orgName*, persName*
model.nameLike.agent_sequenceRepeatable = name+, orgName+, persName+
model.segLike = notAllowed
model.hiLike = notAllowed
model.hiLike_alternation = notAllowed
model.hiLike_sequence = empty
model.hiLike_sequenceOptional = empty
model.hiLike_sequenceOptionalRepeatable = empty
model.hiLike_sequenceRepeatable = notAllowed
model.emphLike = foreign | emph | title
model.emphLike_alternation = foreign | emph | title
model.emphLike_sequence = foreign, emph, title
model.emphLike_sequenceOptional = foreign?, emph?, title?
model.emphLike_sequenceOptionalRepeatable = foreign*, emph*, title*
model.emphLike_sequenceRepeatable = foreign+, emph+, title+
model.highlighted = model.hiLike | model.emphLike
model.dateLike = date
model.dateLike_alternation = date
model.dateLike_sequence = date
model.dateLike_sequenceOptional = date?
model.dateLike_sequenceOptionalRepeatable = date*
model.dateLike_sequenceRepeatable = date+
model.measureLike = geo
model.measureLike_alternation = geo
model.measureLike_sequence = geo
model.measureLike_sequenceOptional = geo?
model.measureLike_sequenceOptionalRepeatable = geo*
model.measureLike_sequenceRepeatable = geo+
model.egLike = notAllowed
model.egLike_alternation = notAllowed
model.egLike_sequence = empty
model.egLike_sequenceOptional = empty
model.egLike_sequenceOptionalRepeatable = empty
model.egLike_sequenceRepeatable = notAllowed
model.graphicLike = graphic
model.offsetLike = offset | geogFeat
model.offsetLike_alternation = offset | geogFeat
model.offsetLike_sequence = offset, geogFeat
model.offsetLike_sequenceOptional = offset?, geogFeat?
model.offsetLike_sequenceOptionalRepeatable = offset*, geogFeat*
model.offsetLike_sequenceRepeatable = offset+, geogFeat+
model.pPart.msdesc = notAllowed
model.pPart.editorial = ex | am | subst
model.pPart.editorial_alternation = ex | am | subst
model.pPart.editorial_sequence = ex, am, subst
model.pPart.editorial_sequenceOptional = ex?, am?, subst?
model.pPart.editorial_sequenceOptionalRepeatable = ex*, am*, subst*
model.pPart.editorial_sequenceRepeatable = ex+, am+, subst+
model.pPart.transcriptional =
  damage
  | handShift
  | restore
  | supplied
  | surplus
  | secl
  | mod
  | redo
  | retrace
  | undo
model.pPart.transcriptional_alternation =
  damage
  | handShift
  | restore
  | supplied
  | surplus
  | secl
  | mod
  | redo
  | retrace
  | undo
model.pPart.transcriptional_sequence =
  damage,
  handShift,
  restore,
  supplied,
  surplus,
  secl,
  mod,
  redo,
  retrace,
  undo
model.pPart.transcriptional_sequenceOptional =
  damage?,
  handShift?,
  restore?,
  supplied?,
  surplus?,
  secl?,
  mod?,
  redo?,
  retrace?,
  undo?
model.pPart.transcriptional_sequenceOptionalRepeatable =
  damage*,
  handShift*,
  restore*,
  supplied*,
  surplus*,
  secl*,
  mod*,
  redo*,
  retrace*,
  undo*
model.pPart.transcriptional_sequenceRepeatable =
  damage+,
  handShift+,
  restore+,
  supplied+,
  surplus+,
  secl+,
  mod+,
  redo+,
  retrace+,
  undo+
model.pPart.edit = model.pPart.editorial | model.pPart.transcriptional
model.linePart =
  model.hiLike
  | zone
  | path
  | damage
  | handShift
  | restore
  | line
  | mod
  | redo
  | retrace
  | undo
model.ptrLike = notAllowed
model.lPart = notAllowed
model.global.meta = substJoin | listTranspose
model.milestoneLike = pb | fw
model.gLike = notAllowed
model.oddDecl = notAllowed
model.oddDecl_alternation = notAllowed
model.oddDecl_sequence = empty
model.oddDecl_sequenceOptional = empty
model.oddDecl_sequenceOptionalRepeatable = empty
model.oddDecl_sequenceRepeatable = notAllowed
model.phrase.xml = notAllowed
model.specDescLike = notAllowed
model.biblLike = bibl | biblStruct | listBibl
model.biblLike_alternation = bibl | biblStruct | listBibl
model.biblLike_sequence = bibl, biblStruct, listBibl
model.biblLike_sequenceOptional = bibl?, biblStruct?, listBibl?
model.biblLike_sequenceOptionalRepeatable =
  bibl*, biblStruct*, listBibl*
model.biblLike_sequenceRepeatable = bibl+, biblStruct+, listBibl+
model.headLike = head
model.headLike_alternation = head
model.headLike_sequence = head
model.headLike_sequenceOptional = head?
model.headLike_sequenceOptionalRepeatable = head*
model.headLike_sequenceRepeatable = head+
model.labelLike = desc
model.labelLike_alternation = desc
model.labelLike_sequence = desc
model.labelLike_sequenceOptional = desc?
model.labelLike_sequenceOptionalRepeatable = desc*
model.labelLike_sequenceRepeatable = desc+
model.listLike =
  \list
  | listOrg
  | listEvent
  | listPerson
  | listPlace
  | listRelation
  | listObject
  | listNym
model.listLike_alternation =
  \list
  | listOrg
  | listEvent
  | listPerson
  | listPlace
  | listRelation
  | listObject
  | listNym
model.listLike_sequence =
  \list,
  listOrg,
  listEvent,
  listPerson,
  listPlace,
  listRelation,
  listObject,
  listNym
model.listLike_sequenceOptional =
  \list?,
  listOrg?,
  listEvent?,
  listPerson?,
  listPlace?,
  listRelation?,
  listObject?,
  listNym?
model.listLike_sequenceOptionalRepeatable =
  \list*,
  listOrg*,
  listEvent*,
  listPerson*,
  listPlace*,
  listRelation*,
  listObject*,
  listNym*
model.listLike_sequenceRepeatable =
  \list+,
  listOrg+,
  listEvent+,
  listPerson+,
  listPlace+,
  listRelation+,
  listObject+,
  listNym+
model.noteLike = note
model.lLike = notAllowed
model.lLike_alternation = notAllowed
model.lLike_sequence = empty
model.lLike_sequenceOptional = empty
model.lLike_sequenceOptionalRepeatable = empty
model.lLike_sequenceRepeatable = notAllowed
model.pLike = p | ab
model.pLike_alternation = p | ab
model.pLike_sequence = p, ab
model.pLike_sequenceOptional = p?, ab?
model.pLike_sequenceOptionalRepeatable = p*, ab*
model.pLike_sequenceRepeatable = p+, ab+
model.stageLike = notAllowed
model.stageLike_alternation = notAllowed
model.stageLike_sequence = empty
model.stageLike_sequenceOptional = empty
model.stageLike_sequenceOptionalRepeatable = empty
model.stageLike_sequenceRepeatable = notAllowed
model.entryPart = notAllowed
model.eventLike = event | listEvent
model.global.edit = addSpan | damageSpan | delSpan | space
model.divPart = model.lLike | model.pLike
model.persStateLike =
  persName
  | affiliation
  | age
  | education
  | faith
  | floruit
  | langKnowledge
  | nationality
  | occupation
  | persona
  | residence
  | sex
  | socecStatus
  | state
  | trait
model.personLike = org | person | personGrp
model.personPart =
  model.biblLike
  | model.eventLike
  | model.persStateLike
  | name
  | birth
  | death
model.placeNamePart =
  placeName | bloc | country | region | settlement | district | geogName
model.placeNamePart_alternation =
  placeName | bloc | country | region | settlement | district | geogName
model.placeNamePart_sequence =
  placeName, bloc, country, region, settlement, district, geogName
model.placeNamePart_sequenceOptional =
  placeName?,
  bloc?,
  country?,
  region?,
  settlement?,
  district?,
  geogName?
model.placeNamePart_sequenceOptionalRepeatable =
  placeName*,
  bloc*,
  country*,
  region*,
  settlement*,
  district*,
  geogName*
model.placeNamePart_sequenceRepeatable =
  placeName+,
  bloc+,
  country+,
  region+,
  settlement+,
  district+,
  geogName+
model.placeStateLike =
  model.placeNamePart
  | climate
  | location
  | population
  | state
  | terrain
  | trait
model.placeStateLike_alternation =
  model.placeNamePart_alternation
  | climate
  | location
  | population
  | state
  | terrain
  | trait
model.placeStateLike_sequence =
  model.placeNamePart_sequence,
  climate,
  location,
  population,
  state,
  terrain,
  trait
model.placeStateLike_sequenceOptional =
  model.placeNamePart_sequenceOptional?,
  climate?,
  location?,
  population?,
  state?,
  terrain?,
  trait?
model.placeStateLike_sequenceOptionalRepeatable =
  model.placeNamePart_sequenceOptionalRepeatable*,
  climate*,
  location*,
  population*,
  state*,
  terrain*,
  trait*
model.placeStateLike_sequenceRepeatable =
  model.placeNamePart_sequenceRepeatable+,
  climate+,
  location+,
  population+,
  state+,
  terrain+,
  trait+
model.orgPart = model.eventLike | listOrg | listPerson | listPlace
model.publicationStmtPart.agency = notAllowed
model.publicationStmtPart.detail = model.ptrLike | date
model.certLike = notAllowed
model.descLike = desc
model.quoteLike = quote
model.quoteLike_alternation = quote
model.quoteLike_sequence = quote
model.quoteLike_sequenceOptional = quote?
model.quoteLike_sequenceOptionalRepeatable = quote*
model.quoteLike_sequenceRepeatable = quote+
model.qLike = model.quoteLike
model.qLike_alternation = model.quoteLike_alternation
model.qLike_sequence = model.quoteLike_sequence
model.qLike_sequenceOptional = model.quoteLike_sequenceOptional?
model.qLike_sequenceOptionalRepeatable =
  model.quoteLike_sequenceOptionalRepeatable*
model.qLike_sequenceRepeatable = model.quoteLike_sequenceRepeatable+
model.respLike = author | editor | respStmt
model.divWrapper = notAllowed
model.divTopPart = model.headLike
model.divTop = model.divWrapper | model.divTopPart
model.divBottomPart = notAllowed
model.divBottom = model.divWrapper | model.divBottomPart
model.imprintPart = biblScope
model.addressLike = email | affiliation
model.addressLike_alternation = email | affiliation
model.addressLike_sequence = email, affiliation
model.addressLike_sequenceOptional = email?, affiliation?
model.addressLike_sequenceOptionalRepeatable = email*, affiliation*
model.addressLike_sequenceRepeatable = email+, affiliation+
model.nameLike =
  model.nameLike.agent
  | model.offsetLike
  | model.placeStateLike
  | model.persNamePart
  | objectName
model.nameLike_alternation =
  model.nameLike.agent_alternation
  | model.offsetLike_alternation
  | model.placeStateLike_alternation
  | model.persNamePart_alternation
  | objectName
model.nameLike_sequence =
  model.nameLike.agent_sequence,
  model.offsetLike_sequence,
  model.placeStateLike_sequence,
  model.persNamePart_sequence,
  objectName
model.nameLike_sequenceOptional =
  model.nameLike.agent_sequenceOptional?,
  model.offsetLike_sequenceOptional?,
  model.placeStateLike_sequenceOptional?,
  model.persNamePart_sequenceOptional?,
  objectName?
model.nameLike_sequenceOptionalRepeatable =
  model.nameLike.agent_sequenceOptionalRepeatable*,
  model.offsetLike_sequenceOptionalRepeatable*,
  model.placeStateLike_sequenceOptionalRepeatable*,
  model.persNamePart_sequenceOptionalRepeatable*,
  objectName*
model.nameLike_sequenceRepeatable =
  model.nameLike.agent_sequenceRepeatable+,
  model.offsetLike_sequenceRepeatable+,
  model.placeStateLike_sequenceRepeatable+,
  model.persNamePart_sequenceRepeatable+,
  objectName+
model.global =
  model.global.meta
  | model.milestoneLike
  | model.noteLike
  | model.global.edit
  | metamark
model.biblPart =
  model.respLike
  | model.imprintPart
  | bibl
  | listRelation
  | objectIdentifier
model.pPart.data =
  model.dateLike
  | model.measureLike
  | model.addressLike
  | model.nameLike
model.inter =
  model.egLike
  | model.oddDecl
  | model.biblLike
  | model.labelLike
  | model.listLike
  | model.stageLike
  | model.qLike
model.common = model.divPart | model.inter
model.phrase =
  model.segLike
  | model.highlighted
  | model.graphicLike
  | model.pPart.msdesc
  | model.pPart.edit
  | model.ptrLike
  | model.lPart
  | model.phrase.xml
  | model.specDescLike
  | model.pPart.data
model.limitedPhrase =
  model.hiLike
  | model.emphLike
  | model.pPart.msdesc
  | model.pPart.editorial
  | model.ptrLike
  | model.phrase.xml
  | model.pPart.data
model.divLike = \div
model.divGenLike = notAllowed
model.div1Like = notAllowed
model.teiHeaderPart = encodingDesc | profileDesc
model.sourceDescPart = notAllowed
model.encodingDescPart = unitDecl
model.profileDescPart = abstract | handNotes | listTranspose
model.standOffPart =
  model.global.meta | model.biblLike | model.listLike | zone
att.formula.attributes = att.formula.attribute.formula
att.formula.attribute.formula =
  [
    a:documentation [
      "An "
      ns1:code [ "@formula" ]
      " is provided to describe a mathematical calculation such as a conversion between measurement systems."
    ]
  ]
  attribute formula { text }?
model.resource = standOff | \text | facsimile | sourceDoc
model.objectLike = object | listObject
att.personal.attributes =
  att.naming.attributes,
  att.personal.attribute.full,
  att.personal.attribute.sort
att.personal.attribute.full =
  
  ## indicates whether the name component is given in full, as an abbreviation or simply as an initial.
  [ a:defaultValue = "yes" ]
  attribute full {
    
    ## the name component is spelled out in full.
    "yes"
    | 
      ## (abbreviated) the name component is given in an abbreviated form.
      "abb"
    | 
      ## (initial letter) the name component is indicated only by one initial.
      "init"
  }?
att.personal.attribute.sort =
  
  ## specifies the sort order of the name component in relation to others within the name.
  attribute sort { xsd:nonNegativeInteger }?
model.placeLike = place
p =
  
  ## (paragraph) marks paragraphs in prose. [3.1. Paragraphs 7.2.5. Speech Contents]
  element p {
    macro.paraContent
    >> sch:pattern [
         id = "harambee-p-abstractModel-structure-p-constraint-report-4"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:p"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "not(ancestor::tei:floatingText) and (ancestor::tei:p or ancestor::tei:ab)          and not(parent::tei:exemplum                |parent::tei:item                |parent::tei:note                |parent::tei:q                |parent::tei:quote                |parent::tei:remarks                |parent::tei:said                |parent::tei:sp                |parent::tei:stage                |parent::tei:cell                |parent::tei:figure                )"
             "\x{a}" ~
             "        Abstract model violation: Paragraphs may not occur inside other paragraphs or ab elements.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "harambee-p-abstractModel-structure-l-constraint-report-5"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:p"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:l[not(.//tei:note//tei:p[. = current()])]"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level structural elements such as div, p, or ab.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.declaring.attributes,
    att.fragmentable.attributes,
    att.written.attributes,
    empty
  }
foreign =
  
  ## identifies a word or phrase as belonging to some language other than that of the surrounding text. [3.3.2.1. Foreign Words or Expressions]
  element foreign { macro.phraseSeq, att.global.attributes, empty }
emph =
  
  ## (emphasized) marks words or phrases which are stressed or emphasized for linguistic or rhetorical effect. [3.3.2.2. Emphatic Words and Phrases 3.3.2. Emphasis, Foreign Words, and Unusual Language]
  element emph { macro.paraContent, att.global.attributes, empty }
quote =
  
  ## (quotation) contains a phrase or passage attributed by the narrator or author to some agency external to the text. [3.3.3. Quotation 4.3.1. Grouped Texts]
  element quote {
    macro.specialPara,
    att.global.attributes,
    att.typed.attributes,
    att.notated.attributes,
    empty
  }
desc =
  
  ## (description) contains a brief description of the object documented by its parent element, typically a documentation element or an entity. [22.4.1. Description of Components]
  element desc {
    macro.limitedContent
    >> sch:pattern [
         id =
           "harambee-desc-deprecationInfo-only-in-deprecated-constraint-rule-8"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:desc[ @type eq 'deprecationInfo']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "../@validUntil"
             "Information about a\x{a}" ~
             "        deprecation should only be present in a specification element\x{a}" ~
             "        that is being deprecated: that is, only an element that has a\x{a}" ~
             "        @validUntil attribute should have a child <desc\x{a}" ~
             '        type="deprecationInfo">.'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.translatable.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
name =
  
  ## (name, proper noun) contains a proper noun or noun phrase. [3.5.1. Referring Strings]
  element name {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    empty
  }
email =
  
  ## (electronic mail address) contains an email address identifying a location to which email messages can be delivered. [3.5.2. Addresses]
  element email { macro.phraseSeq, att.global.attributes, empty }
date =
  
  ## contains a date in any format. [3.5.4. Dates and Times 2.2.4. Publication, Distribution, Licensing, etc. 2.6. The Revision Description 3.11.2.4. Imprint, Size of a Document, and Reprint Information 15.2.3. The Setting Description 13.3.7. Dates and Times]
  element date {
    (text | model.gLike | model.phrase | model.global)*,
    att.global.attributes,
    att.canonical.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.dimensions.attributes,
    att.typed.attributes,
    empty
  }
\list =
  
  ## contains any sequence of items organized as a list. [3.7. Lists]
  element list {
    ((model.divTop | model.global | desc*)*,
     ((item, model.global*)+ | (model.global*, item, model.global*)+),
     (model.divBottom, model.global*)*)
    >> sch:pattern [
         id =
           "harambee-list-gloss-list-must-have-labels-constraint-rule-9"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:list[@type='gloss']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "tei:label"
             'The content of a "gloss" list should include a sequence of one or more pairs of a label element followed by an item element'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.sortable.attributes,
    att.typed.attribute.subtype,
    
    ## describes the nature of the items in the list.
    ## Suggested values include: 1] gloss; 2] index; 3] instructions; 4] litany; 5] syllogism
    attribute type {
      [
        a:documentation [
          "each list item glosses some term or concept, which is given by a "
          ns1:code [ "<label>" ]
          " element preceding the list item."
        ]
      ]
      "gloss"
      | 
        ## each list item is an entry in an index such as the alphabetical topical index at the back of a print volume.
        "index"
      | 
        ## each list item is a step in a sequence of instructions, as in a recipe.
        "instructions"
      | 
        ## each list item is one of a sequence of petitions, supplications or invocations, typically in a religious ritual.
        "litany"
      | 
        ## each list item is part of an argument consisting of two or more propositions and a final conclusion derived from them.
        "syllogism"
      | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
item =
  
  ## contains one component of a list. [3.7. Lists 2.6. The Revision Description]
  element item {
    macro.specialPara,
    att.global.attributes,
    att.sortable.attributes,
    empty
  }
head =
  
  ## (heading) contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. [4.2.1. Headings and Trailers]
  element head {
    (text
     | model.gLike
     | model.phrase
     | model.inter
     | model.lLike
     | model.global)*,
    att.global.attributes,
    att.typed.attributes,
    att.placement.attributes,
    att.written.attributes,
    empty
  }
note =
  
  ## contains a note or annotation. [3.8.1. Notes and Simple Annotation 2.2.6. The Notes Statement 3.11.2.8. Notes and Statement of Language 9.3.5.4. Notes within Entries]
  element note {
    macro.specialPara,
    att.global.attributes,
    att.placement.attributes,
    att.pointing.attributes,
    att.typed.attributes,
    att.written.attributes,
    
    ## indicates whether the copy text shows the exact place of reference for the note.
    [ a:defaultValue = "true" ] attribute anchored { xsd:boolean }?,
    
    ## points to the end of the span to which the note is attached, if the note is not embedded in the text at that point.
    attribute targetEnd {
      list { xsd:anyURI+ }
    }?,
    empty
  }
graphic =
  
  ## indicates the location of a graphic or illustration, either forming part of a text, or providing an image of it. [3.9. Graphics and Other Non-textual Components 11.1. Digital Facsimiles]
  element graphic {
    model.descLike*,
    att.global.attributes,
    att.media.attributes,
    att.resourced.attributes,
    att.declaring.attributes,
    empty
  }
pb =
  
  ## (page beginning) marks the beginning of a new page in a paginated document. [3.10.3. Milestone
  ## Elements]
  element pb {
    empty,
    att.global.attributes,
    att.typed.attributes,
    att.edition.attributes,
    att.spanning.attributes,
    att.breaking.attributes,
    empty
  }
author =
  
  ## in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority. [3.11.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement]
  element author {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
editor =
  
  ## contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc. [3.11.2.2. Titles, Authors, and Editors]
  element editor {
    macro.phraseSeq, att.global.attributes, att.naming.attributes, empty
  }
respStmt =
  
  ## (statement of responsibility) supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. [3.11.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.2. The Edition Statement 2.2.5. The Series Statement]
  element respStmt {
    (((resp+, model.nameLike.agent+) | (model.nameLike.agent+, resp+)),
     note*),
    att.global.attributes,
    att.canonical.attributes,
    empty
  }
resp =
  
  ## (responsibility) contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. [3.11.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.2. The Edition Statement 2.2.5. The Series Statement]
  element resp {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.canonical.attributes,
    att.datable.attributes,
    empty
  }
title =
  
  ## contains a title for any kind of work. [3.11.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.5. The Series Statement]
  element title {
    macro.paraContent,
    att.global.attributes,
    att.typed.attribute.subtype,
    att.canonical.attributes,
    att.datable.attributes,
    
    ## classifies the title according to some convenient typology.
    ## Sample values include: 1] main; 2] sub (subordinate); 3] alt (alternate); 4] short; 5] desc (descriptive)
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## indicates the bibliographic level for a title, that is, whether it identifies an article, book, journal, series, or unpublished material.
    attribute level {
      
      ## (analytic) the title applies to an analytic item, such as an article, poem, or other work published as part of a larger item.
      "a"
      | 
        ## (monographic) the title applies to a monograph such as a book or other item considered to be a distinct publication, including single volumes of multi-volume works
        "m"
      | 
        ## (journal) the title applies to any serial or periodical publication such as a journal, magazine, or newspaper
        "j"
      | 
        ## (series) the title applies to a series of otherwise distinct publications such as a collection
        "s"
      | 
        ## (unpublished) the title applies to any unpublished material (including theses and dissertations unless published by a commercial press)
        "u"
    }?,
    empty
  }
biblScope =
  
  ## (scope of bibliographic reference) defines the scope of a bibliographic reference, for example as a list of page numbers, or a named subdivision of a larger work. [3.11.2.5. Scopes and Ranges in Bibliographic Citations]
  element biblScope {
    macro.phraseSeq, att.global.attributes, att.citing.attributes, empty
  }
bibl =
  
  ## (bibliographic citation) contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. [3.11.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]
  element bibl {
    (text
     | model.gLike
     | model.highlighted
     | model.pPart.data
     | model.pPart.edit
     | model.segLike
     | model.ptrLike
     | model.biblPart
     | model.global)*,
    att.global.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    att.docStatus.attributes,
    empty
  }
biblStruct =
  
  ## (structured bibliographic citation) contains a structured bibliographic citation, in which only bibliographic sub-elements appear and in a specified order. [3.11.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]
  element biblStruct {
    (model.noteLike | model.ptrLike)*,
    att.global.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    att.docStatus.attributes,
    empty
  }
listBibl =
  
  ## (citation list) contains a list of bibliographic citations of any kind. [3.11.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]
  element listBibl {
    (model.headLike*,
     desc*,
     (model.biblLike | model.milestoneLike)+,
     (relation | listRelation)*),
    att.global.attributes,
    att.sortable.attributes,
    att.declarable.attributes,
    att.typed.attributes,
    empty
  }
teiHeader =
  
  ## (TEI header) supplies descriptive and declarative metadata associated with a digital resource or set of resources. [2.1.1. The TEI Header and Its Components 15.1. Varieties of Composite Text]
  element teiHeader {
    (fileDesc, model.teiHeaderPart*), att.global.attributes, empty
  }
fileDesc =
  
  ## (file description) contains a full bibliographic description of an electronic file. [2.2. The File Description 2.1.1. The TEI Header and Its Components]
  element fileDesc {
    ((titleStmt, publicationStmt, notesStmt?), sourceDesc+),
    att.global.attributes,
    empty
  }
titleStmt =
  
  ## (title statement) groups information about the title of a work and those responsible for its content. [2.2.1. The Title Statement 2.2. The File Description]
  element titleStmt {
    (title+, model.respLike*), att.global.attributes, empty
  }
publicationStmt =
  
  ## (publication statement) groups information concerning the publication or distribution of an electronic or other text. [2.2.4. Publication, Distribution, Licensing, etc. 2.2. The File Description]
  element publicationStmt {
    ((model.publicationStmtPart.agency,
      model.publicationStmtPart.detail*)+
     | model.pLike+),
    att.global.attributes,
    empty
  }
notesStmt =
  
  ## (notes statement) collects together any notes providing information about a text additional to that recorded in other parts of the bibliographic description. [2.2.6. The Notes Statement 2.2. The File Description]
  element notesStmt { (model.noteLike)+, att.global.attributes, empty }
sourceDesc =
  
  ## (source description) describes the source(s) from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as "born digital" for a text which has no previous existence. [2.2.7. The Source Description]
  element sourceDesc {
    (model.pLike+
     | (model.biblLike | model.sourceDescPart | model.listLike)+),
    att.global.attributes,
    att.declarable.attributes,
    empty
  }
encodingDesc =
  
  ## (encoding description) documents the relationship between an electronic text and the source or sources from which it was derived. [2.3. The Encoding Description 2.1.1. The TEI Header and Its Components]
  element encodingDesc {
    (model.encodingDescPart | model.pLike)+,
    att.global.attributes,
    empty
  }
unitDecl =
  
  ## (unit declarations) provides information about units of measurement that are not members of the International System of Units. [2.3.9. The Unit Declaration]
  element unitDecl {
    unitDef+,
    att.canonical.attributes,
    att.datable.attributes,
    att.global.attributes,
    empty
  }
unitDef =
  
  ## (unit definition) contains descriptive information related to a specific unit of measurement. [2.3.9. The Unit Declaration]
  element unitDef {
    (model.labelLike | model.placeNamePart? | conversion?)+,
    att.global.attributes,
    att.datable.attributes,
    att.canonical.attributes,
    att.typed.attributes,
    empty
  }
conversion =
  
  ## defines how to calculate one unit of measure in terms of another. [2.3.9. The Unit Declaration]
  element conversion {
    empty,
    att.global.attributes,
    att.datable.attributes,
    att.formula.attributes,
    [
      a:documentation [
        "indicates a source unit of measure that is to be converted into another unit indicated in "
        ns1:code [ "@toUnit" ]
        "."
      ]
    ]
    attribute fromUnit { xsd:anyURI },
    [
      a:documentation [
        "the target unit of measurement for a conversion from a source unit referenced in "
        ns1:code [ "@fromUnit" ]
        "."
      ]
    ]
    attribute toUnit { xsd:anyURI },
    empty
  }
profileDesc =
  
  ## (text-profile description) provides a detailed description of non-bibliographic aspects of a text, specifically the languages and sublanguages used, the situation in which it was produced, the participants and their setting. [2.4. The Profile Description 2.1.1. The TEI Header and Its Components]
  element profileDesc {
    model.profileDescPart*, att.global.attributes, empty
  }
abstract =
  
  ## contains a summary or formal abstract prefixed to an existing source document by the encoder. [2.4.4. Abstracts]
  element abstract {
    (model.pLike | model.listLike)+, att.global.attributes, empty
  }
att.global.linking.attributes =
  att.global.linking.attribute.corresp,
  att.global.linking.attribute.synch,
  att.global.linking.attribute.sameAs,
  att.global.linking.attribute.copyOf,
  att.global.linking.attribute.next,
  att.global.linking.attribute.prev,
  att.global.linking.attribute.exclude,
  att.global.linking.attribute.select
att.global.linking.attribute.corresp =
  
  ## (corresponds) points to elements that correspond to the current element in some way.
  attribute corresp {
    list { xsd:anyURI+ }
  }?
att.global.linking.attribute.synch =
  
  ## (synchronous) points to elements that are synchronous with the current element.
  attribute synch {
    list { xsd:anyURI+ }
  }?
att.global.linking.attribute.sameAs =
  
  ## points to an element that is the same as the current element.
  attribute sameAs { xsd:anyURI }?
att.global.linking.attribute.copyOf =
  
  ## points to an element of which the current element is a copy.
  attribute copyOf { xsd:anyURI }?
att.global.linking.attribute.next =
  
  ## points to the next element of a virtual aggregate of which the current element is part.
  attribute next { xsd:anyURI }?
att.global.linking.attribute.prev =
  
  ## (previous) points to the previous element of a virtual aggregate of which the current element is part.
  attribute prev { xsd:anyURI }?
att.global.linking.attribute.exclude =
  
  ## points to elements that are in exclusive alternation with the current element.
  attribute exclude {
    list { xsd:anyURI+ }
  }?
att.global.linking.attribute.select =
  
  ## selects one or more alternants; if one alternant is selected, the ambiguity or uncertainty is marked as resolved. If more than one alternant is selected, the degree of ambiguity or uncertainty is marked as reduced by the number of alternants not selected.
  attribute select {
    list { xsd:anyURI+ }
  }?
ab =
  
  ## (anonymous block) contains any arbitrary component-level unit of text, acting as an anonymous container for phrase or inter level elements analogous to, but without the semantic baggage of, a paragraph. [16.3. Blocks, Segments, and Anchors]
  element ab {
    macro.paraContent
    >> sch:pattern [
         id =
           "harambee-ab-abstractModel-structure-ab-constraint-report-6"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ab"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "not(ancestor::tei:floatingText) and (ancestor::tei:p or ancestor::tei:ab)          and not(parent::tei:exemplum         |parent::tei:item         |parent::tei:note         |parent::tei:q         |parent::tei:quote         |parent::tei:remarks         |parent::tei:said         |parent::tei:sp         |parent::tei:stage         |parent::tei:cell         |parent::tei:figure)"
             "\x{a}" ~
             "        Abstract model violation: ab may not occur inside paragraphs or other ab elements.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "harambee-ab-abstractModel-structure-l-constraint-report-7"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ab"
           "\x{a}" ~
           "               "
           sch:report [
             test = "ancestor::tei:l or ancestor::tei:lg"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level divisions such as p or ab.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    att.fragmentable.attributes,
    att.written.attributes,
    empty
  }
standOff =
  
  ## Functions as a container element for linked data, contextual information, and stand-off annotations embedded in a TEI document. [16.10. The standOff Container]
  element standOff {
    (model.standOffPart+)
    >> sch:pattern [
         id =
           "harambee-standOff-nested_standOff_should_be_typed-constraint-assert-7"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:standOff"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@type or not(ancestor::tei:standOff)"
             "This\x{a}" ~
             "      "
             sch:name [ ]
             " element must have a @type attribute, since it is\x{a}" ~
             "      nested inside a "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    empty
  }
att.datable.custom.attributes =
  att.datable.custom.attribute.when-custom,
  att.datable.custom.attribute.notBefore-custom,
  att.datable.custom.attribute.notAfter-custom,
  att.datable.custom.attribute.from-custom,
  att.datable.custom.attribute.to-custom,
  att.datable.custom.attribute.datingPoint,
  att.datable.custom.attribute.datingMethod
att.datable.custom.attribute.when-custom =
  
  ## supplies the value of a date or time in some custom standard form.
  attribute when-custom {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.datable.custom.attribute.notBefore-custom =
  
  ## specifies the earliest possible date for the event in some custom standard form.
  attribute notBefore-custom {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.datable.custom.attribute.notAfter-custom =
  
  ## specifies the latest possible date for the event in some custom standard form.
  attribute notAfter-custom {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.datable.custom.attribute.from-custom =
  
  ## indicates the starting point of the period in some custom standard form.
  attribute from-custom {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.datable.custom.attribute.to-custom =
  
  ## indicates the ending point of the period in some custom standard form.
  attribute to-custom {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
att.datable.custom.attribute.datingPoint =
  
  ## supplies a pointer to some location defining a named point in time with reference to which the datable item is understood to have occurred
  attribute datingPoint { xsd:anyURI }?
att.datable.custom.attribute.datingMethod =
  [
    a:documentation [
      "supplies a pointer to a "
      ns1:code [ "<calendar>" ]
      " element or other means of interpreting the values of the custom dating attributes."
    ]
  ]
  attribute datingMethod { xsd:anyURI }?
model.persNamePart =
  surname | forename | genName | nameLink | addName | roleName
model.persNamePart_alternation =
  surname | forename | genName | nameLink | addName | roleName
model.persNamePart_sequence =
  surname, forename, genName, nameLink, addName, roleName
model.persNamePart_sequenceOptional =
  surname?, forename?, genName?, nameLink?, addName?, roleName?
model.persNamePart_sequenceOptionalRepeatable =
  surname*, forename*, genName*, nameLink*, addName*, roleName*
model.persNamePart_sequenceRepeatable =
  surname+, forename+, genName+, nameLink+, addName+, roleName+
att.datable.iso.attributes =
  att.datable.iso.attribute.when-iso,
  att.datable.iso.attribute.notBefore-iso,
  att.datable.iso.attribute.notAfter-iso,
  att.datable.iso.attribute.from-iso,
  att.datable.iso.attribute.to-iso
att.datable.iso.attribute.when-iso =
  
  ## supplies the value of a date or time in a standard form.
  attribute when-iso {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
    | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
  }?
att.datable.iso.attribute.notBefore-iso =
  
  ## specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notBefore-iso {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
    | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
  }?
att.datable.iso.attribute.notAfter-iso =
  
  ## specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notAfter-iso {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
    | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
  }?
att.datable.iso.attribute.from-iso =
  
  ## indicates the starting point of the period in standard form.
  attribute from-iso {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
    | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
  }?
att.datable.iso.attribute.to-iso =
  
  ## indicates the ending point of the period in standard form.
  attribute to-iso {
    xsd:date
    | xsd:gYear
    | xsd:gMonth
    | xsd:gDay
    | xsd:gYearMonth
    | xsd:gMonthDay
    | xsd:time
    | xsd:dateTime
    | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
  }?
orgName =
  
  ## (organization name) contains an organizational name. [13.2.2. Organizational Names]
  element orgName {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
persName =
  
  ## (personal name) contains a proper noun or proper-noun phrase referring to a person, possibly including one or more of the person's forenames, surnames, honorifics, added names, etc. [13.2.1. Personal Names]
  element persName {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
surname =
  
  ## contains a family (inherited) name, as opposed to a given, baptismal, or nick name. [13.2.1. Personal Names]
  element surname {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
forename =
  
  ## contains a forename, given or baptismal name. [13.2.1. Personal Names]
  element forename {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
genName =
  
  ## (generational name component) contains a name component used to distinguish otherwise similar names on the basis of the relative ages or generations of the persons named. [13.2.1. Personal Names]
  element genName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
nameLink =
  
  ## (name link) contains a connecting phrase or link used within a name but not regarded as part of it, such as van der or of. [13.2.1. Personal Names]
  element nameLink {
    macro.phraseSeq, att.global.attributes, att.typed.attributes, empty
  }
addName =
  
  ## (additional name) contains an additional name component, such as a nickname, epithet, or alias, or any other descriptive phrase used within a personal name. [13.2.1. Personal Names]
  element addName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
roleName =
  
  ## contains a name component which indicates that the referent has a particular role or position in society, such as an official title or rank. [13.2.1. Personal Names]
  element roleName {
    macro.phraseSeq,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
placeName =
  
  ## contains an absolute or relative place name. [13.2.3. Place Names]
  element placeName {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
bloc =
  
  ## contains the name of a geo-political unit consisting of two or more nation states or countries. [13.2.3. Place Names]
  element bloc {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
country =
  
  ## contains the name of a geo-political unit, such as a nation, country, colony, or commonwealth, larger than or administratively superior to a region and smaller than a bloc. [13.2.3. Place Names]
  element country {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
region =
  
  ## contains the name of an administrative unit such as a state, province, or county, larger than a settlement, but smaller than a country. [13.2.3. Place Names]
  element region {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
settlement =
  
  ## contains the name of a settlement such as a city, town, or village identified as a single geo-political or administrative unit. [13.2.3. Place Names]
  element settlement {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
district =
  
  ## contains the name of any kind of subdivision of a settlement, such as a parish, ward, or other administrative or geographic unit. [13.2.3. Place Names]
  element district {
    macro.phraseSeq,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.datable.attributes,
    empty
  }
offset =
  
  ## marks that part of a relative temporal or spatial expression which indicates the direction of the offset between the two place names, dates, or times involved in the expression. [13.2.3. Place Names]
  element offset {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
geogName =
  
  ## (geographical name) identifies a name associated with some geographical feature such as Windrush Valley or Mount Sinai. [13.2.3. Place Names]
  element geogName {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
geogFeat =
  
  ## (geographical feature name) contains a common noun identifying some geographical feature contained within a geographic name, such as valley, mount, etc. [13.2.3. Place Names]
  element geogFeat {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
affiliation =
  
  ## contains an informal description of a person's present or past affiliation with some organization, for example an employer or sponsor. [15.2.2. The Participant Description]
  element affiliation {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] sponsor; 2] recommend; 3] discredit; 4] pledged
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
age =
  
  ## specifies the age of a person. [13.3.2.1. Personal Characteristics]
  element age {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.typed.attribute.subtype,
    att.dimensions.attributes,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] western; 2] sui; 3] subjective; 4] objective; 5] inWorld (in world); 6] chronological; 7] biological; 8] psychological; 9] functional
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## supplies a numeric code representing the age or age group
    attribute value { xsd:nonNegativeInteger }?,
    empty
  }
birth =
  
  ## contains information about a person's birth, such as its date and place. [15.2.2. The Participant Description]
  element birth {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.dimensions.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] caesarean (caesarean section); 2] vaginal (vaginal delivery); 3] exNihilo (ex nihilo); 4] incorporated; 5] founded; 6] established
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
climate =
  
  ## contains information about the physical climate of a place. [13.3.4.3. States, Traits, and Events]
  element climate {
    (model.headLike*,
     (model.pLike+ | model.labelLike+),
     (model.noteLike | model.biblLike)*,
     climate*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
death =
  
  ## contains information about a person's death, such as its date and place. [15.2.2. The Participant Description]
  element death {
    macro.phraseSeq,
    att.datable.attributes,
    att.dimensions.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] proclaimed; 2] assumed; 3] verified; 4] clinical; 5] brain; 6] natural; 7] unnatural; 8] fragmentation; 9] dissolution
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
education =
  
  ## contains a description of the educational experience of a person. [15.2.2. The Participant Description]
  element education {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] primary; 2] secondary; 3] undergraduate; 4] graduate; 5] residency; 6] apprenticeship
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
event =
  
  ## contains data relating to any kind of significant event associated with a person, place, or organization. [13.3.1. Basic Principles]
  element event {
    (model.headLike*,
     (model.pLike+ | model.labelLike+),
     (model.noteLike | model.biblLike)*,
     event*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    att.naming.attributes,
    att.sortable.attributes,
    [
      a:documentation [
        "indicates the location of an event by pointing to a "
        ns1:code [ "<place>" ]
        " element"
      ]
    ]
    attribute where { xsd:anyURI }?,
    empty
  }
faith =
  
  ## specifies the faith, religion, or belief set of a person. [13.3.2.1. Personal Characteristics]
  element faith {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.canonical.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] practicing; 2] clandestine; 3] patrilineal; 4] matrilineal; 5] convert
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
floruit =
  
  ## contains information about a person's period of activity. [13.3.2.1. Personal Characteristics]
  element floruit {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.dimensions.attributes,
    att.editLike.attributes,
    empty
  }
geo =
  
  ## (geographical coordinates) contains any expression of a set of geographic coordinates, representing a point, line, or area on the surface of the earth in some notation. [13.3.4.1. Varieties of Location]
  element geo {
    text, att.global.attributes, att.declaring.attributes, empty
  }
langKnowledge =
  [
    a:documentation [
      "(language knowledge) summarizes the state of a person's linguistic knowledge, either as prose or by a list of "
      ns1:code [ "<langKnown>" ]
      " elements. [13.3.2.1. Personal Characteristics]"
    ]
  ]
  element langKnowledge {
    (model.pLike | langKnown+),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] listening; 2] speaking; 3] reading; 4] writing
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## supplies one or more valid language tags for the languages specified
    attribute tags {
      list {
        (xsd:language
         | (
            ##
            ""))+
      }
    }?,
    empty
  }
langKnown =
  
  ## (language known) summarizes the state of a person's linguistic competence, i.e., knowledge of a single language. [15.2.2. The Participant Description]
  element langKnown {
    macro.phraseSeq.limited,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    
    ## supplies a valid language tag for the language concerned.
    attribute tag {
      xsd:language
      | (
         ##
         "")
    },
    
    ## a code indicating the person's level of knowledge for this language
    attribute level {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
listOrg =
  
  ## (list of organizations) contains a list of elements, each of which provides information about an identifiable organization. [13.2.2. Organizational Names]
  element listOrg {
    (model.headLike*,
     desc*,
     (org | listOrg)+,
     (relation | listRelation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
listEvent =
  
  ## (list of events) contains a list of descriptions, each of which provides information about an identifiable event. [13.3.1. Basic Principles]
  element listEvent {
    (model.headLike*,
     desc*,
     model.eventLike+,
     (relation | listRelation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
listPerson =
  
  ## (list of persons) contains a list of descriptions, each of which provides information about an identifiable person or a group of people, for example the participants in a language interaction, or the people referred to in a historical source. [13.3.2. The Person Element 15.2. Contextual Information 2.4. The Profile Description 15.3.2. Declarable Elements]
  element listPerson {
    (model.headLike*,
     desc*,
     (model.personLike | listPerson)+,
     (relation | listRelation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
listPlace =
  
  ## (list of places) contains a list of places, optionally followed by a list of relationships (other than containment) defined amongst them. [2.2.7. The Source Description 13.3.4. Places]
  element listPlace {
    (model.headLike*,
     desc*,
     (model.placeLike | listPlace)+,
     (relation | listRelation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
location =
  
  ## defines the location of a place as a set of geographical coordinates, in terms of other named geo-political entities, or as an address. [13.3.4. Places]
  element location {
    (model.labelLike
     | model.placeNamePart
     | model.offsetLike
     | model.measureLike
     | model.addressLike
     | model.noteLike
     | model.biblLike)*,
    att.global.attributes,
    att.typed.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    empty
  }
nationality =
  
  ## contains an informal description of a person's present or past nationality or citizenship. [15.2.2. The Participant Description]
  element nationality {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] birth; 2] naturalised; 3] self-assigned
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
occupation =
  
  ## contains an informal description of a person's trade, profession or occupation. [15.2.2. The Participant Description]
  element occupation {
    macro.specialPara,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] primary; 2] other; 3] paid; 4] unpaid
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    [
      a:documentation [
        "indicates the classification system or taxonomy in use, for example by supplying the identifier of a "
        ns1:code [ "<taxonomy>" ]
        " element, or pointing to some other resource."
      ]
    ]
    attribute scheme { xsd:anyURI }?,
    [
      a:documentation [
        "identifies an occupation code defined within the classification system or taxonomy defined by the "
        ns1:code [ "@scheme" ]
        " attribute."
      ]
    ]
    attribute code { xsd:anyURI }?,
    empty
  }
org =
  
  ## (organization) provides information about an identifiable organization such as a business, a tribe, or any other grouping of people. [13.2.2. Organizational Names]
  element org {
    (model.headLike*,
     (model.pLike*
      | (model.labelLike
         | model.nameLike
         | model.placeLike
         | model.orgPart
         | model.milestoneLike)*),
     (model.noteLike | model.biblLike)*,
     model.personLike*),
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    att.sortable.attributes,
    
    ## specifies a primary role or classification for the organization.
    attribute role {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
listRelation =
  
  ## provides information about relationships identified amongst people, places, and organizations, either informally as prose or as formally expressed relation links. [13.3.2.3. Personal Relationships]
  element listRelation {
    (model.headLike*,
     desc*,
     (model.pLike | (relation | listRelation)+)),
    att.global.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    empty
  }
person =
  
  ## provides information about an identifiable individual, for example a participant in a language interaction, or a person referred to in a historical source. [13.3.2. The Person Element 15.2.2. The Participant Description]
  element person {
    (model.pLike+ | (model.personPart | model.global)*),
    att.global.attributes,
    att.editLike.attributes,
    att.sortable.attributes,
    
    ## specifies a primary role or classification for the person.
    attribute role {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    
    ## specifies the sex of the person.
    attribute sex {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    
    ## specifies an age group for the person.
    attribute age {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
persona =
  
  ## provides information about one of the personalities identified for a given individual, where an individual has multiple personalities. [13.3.2. The Person Element]
  element persona {
    (model.pLike+ | (model.personPart | model.global)*),
    att.global.attributes,
    att.editLike.attributes,
    att.sortable.attributes,
    
    ## specifies a primary role or classification for the persona.
    attribute role {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    
    ## specifies the sex of the persona.
    attribute sex {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    
    ## specifies an age group for the persona.
    attribute age {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
personGrp =
  
  ## (personal group) describes a group of individuals treated as a single person for analytic purposes. [15.2.2. The Participant Description]
  element personGrp {
    (model.pLike+ | (model.personPart | model.global)*),
    att.global.attributes,
    att.sortable.attributes,
    
    ## specifies the role of this group of participants in the interaction.
    attribute role {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## specifies the sex of the participant group.
    attribute sex {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    
    ## specifies the age group of the participants.
    attribute age {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## describes informally the size or approximate size of the group for example by means of a number and an indication of accuracy e.g. approx 200.
    attribute size {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
place =
  
  ## contains data about a geographic location [13.3.4. Places]
  element place {
    (model.headLike*,
     (model.pLike*
      | (model.labelLike | model.placeStateLike | model.eventLike)*),
     (model.noteLike | model.biblLike)*,
     (model.placeLike | listPlace)*),
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    att.sortable.attributes,
    empty
  }
population =
  
  ## contains information about the population of a place. [13.3.4.3. States, Traits, and Events]
  element population {
    (model.headLike*,
     ((model.pLike+ | model.labelLike+),
      (model.noteLike | model.biblLike)*)?,
     population*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
relation =
  
  ## (relationship) describes any kind of relationship or linkage amongst a specified group of places, events, persons, objects or other items. [13.3.2.3. Personal Relationships]
  element relation {
    (desc?)
    >> sch:pattern [
         id = "harambee-relation-reforkeyorname-constraint-assert-8"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@ref or @key or @name"
             "One of the attributes  'name', 'ref' or 'key' must be supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "harambee-relation-activemutual-constraint-report-8"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@active and @mutual"
             "Only one of the attributes @active and @mutual may be supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "harambee-relation-activepassive-constraint-report-9"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@passive and not(@active)"
             "the attribute 'passive' may be supplied only if the attribute 'active' is supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.canonical.attributes,
    att.sortable.attributes,
    att.typed.attributes,
    
    ## supplies a name for the kind of relationship of which this is an instance.
    attribute name {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    (
     ## identifies the active participants in a non-mutual relationship, or all the participants in a mutual one.
     attribute active {
       list { xsd:anyURI+ }
     }?
     | 
       ## supplies a list of participants amongst all of whom the relationship holds equally.
       attribute mutual {
         list { xsd:anyURI+ }
       }?),
    
    ## identifies the passive participants in a non-mutual relationship.
    attribute passive {
      list { xsd:anyURI+ }
    }?,
    empty
  }
residence =
  
  ## describes a person's present or past places of residence. [15.2.2. The Participant Description]
  element residence {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] primary; 2] secondary; 3] temporary; 4] permanent
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
sex =
  
  ## specifies the sex of a person. [13.3.2.1. Personal Characteristics]
  element sex {
    macro.phraseSeq,
    att.global.attributes,
    att.editLike.attributes,
    att.datable.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] explicit; 2] implicit
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## supplies a coded value for sex
    attribute value {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
socecStatus =
  
  ## (socio-economic status) contains an informal description of a person's perceived social or economic status. [15.2.2. The Participant Description]
  element socecStatus {
    macro.phraseSeq,
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Sample values include: 1] atBirth; 2] atDeath; 3] dependent; 4] inherited; 5] independent
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    [
      a:documentation [
        "identifies the classification system or taxonomy in use, for example by pointing to a locally-defined "
        ns1:code [ "<taxonomy>" ]
        " element or by supplying a URI for an externally-defined system."
      ]
    ]
    attribute scheme { xsd:anyURI }?,
    [
      a:documentation [
        "identifies a status code defined within the classification system or taxonomy defined by the "
        ns1:code [ "@scheme" ]
        " attribute."
      ]
    ]
    attribute code { xsd:anyURI }?,
    empty
  }
state =
  
  ## contains a description of some status or quality attributed to a person, place, or organization often at some specific time or for a specific date range. [13.3.1. Basic Principles 13.3.2.1. Personal Characteristics]
  element state {
    (state+
     | (model.headLike*,
        model.pLike+,
        (model.noteLike | model.biblLike)*)
     | (model.labelLike | model.noteLike | model.biblLike)*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.typed.attributes,
    att.naming.attributes,
    att.dimensions.attributes,
    empty
  }
terrain =
  
  ## contains information about the physical terrain of a place. [13.3.4.3. States, Traits, and Events]
  element terrain {
    (model.headLike*,
     (model.pLike+ | model.labelLike+),
     (model.noteLike | model.biblLike)*,
     terrain*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    empty
  }
trait =
  
  ## contains a description of some status or quality attributed to a person, place, or organization typically, but not necessarily, independent of the volition or action of the holder and usually not at some specific time or for a specific date range. [13.3.1. Basic Principles 13.3.2.1. Personal Characteristics]
  element trait {
    (trait+
     | (model.headLike*,
        model.pLike+,
        (model.noteLike | model.biblLike)*)
     | (model.labelLike | model.noteLike | model.biblLike)*),
    att.global.attributes,
    att.datable.attributes,
    att.editLike.attributes,
    att.naming.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
objectName =
  
  ## (name of an object) contains a proper noun or noun phrase used to refer to an object. [13.2.4. Object Names]
  element objectName {
    macro.phraseSeq,
    att.datable.attributes,
    att.editLike.attributes,
    att.global.attributes,
    att.personal.attributes,
    att.typed.attributes,
    empty
  }
object =
  
  ## contains a description of a single identifiable physical object. [13.3.5. Objects]
  element object {
    (objectIdentifier+,
     model.headLike*,
     (model.pLike* | empty),
     (model.noteLike | model.biblLike)*,
     object?),
    att.global.attributes,
    att.sortable.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    att.docStatus.attributes,
    att.canonical.attributes,
    empty
  }
listObject =
  
  ## (list of objects) contains a list of descriptions, each of which provides information about an identifiable physical object. [13.3.5. Objects]
  element listObject {
    (model.headLike*,
     desc*,
     model.objectLike+,
     (relation | listRelation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
objectIdentifier =
  
  ## (object identifier) groups one or more identifiers or pieces of locating information concerning a single object. [13.3.5. Objects]
  element objectIdentifier {
    ((model.placeNamePart | objectName)*)
    >> sch:pattern [
         id =
           "harambee-objectIdentifier-objectIdentifier_minimal-constraint-report-10"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:objectIdentifier"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(count(*) gt 0)"
             "An objectIdentifier must contain at minimum a single piece of locating or identifying information."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    empty
  }
nym =
  
  ## (canonical name) contains the definition for a canonical name or name component of any kind. [13.3.6. Names and Nyms]
  element nym {
    (model.entryPart*, model.pLike*, nym*),
    att.global.attributes,
    att.typed.attributes,
    att.sortable.attributes,
    
    ## points to constituent nyms
    attribute parts {
      list { xsd:anyURI+ }
    }?,
    empty
  }
listNym =
  
  ## (list of canonical names) contains a list of nyms, that is, standardized names for any thing. [13.3.6. Names and Nyms]
  element listNym {
    (model.headLike*,
     desc*,
     (nym | listNym)+,
     (relation | listRelation)*),
    att.global.attributes,
    att.typed.attributes,
    att.declarable.attributes,
    att.sortable.attributes,
    empty
  }
TEI =
  [
    a:documentation [
      "(TEI document) contains a single TEI-conformant document, combining a single TEI header with one or more members of the model.resource class. Multiple "
      ns1:code [ "<TEI>" ]
      " elements may be combined within a "
      ns1:code [ "<TEI>" ]
      " (or "
      ns1:code [ "<teiCorpus>" ]
      ") element. [4. Default Text Structure 15.1. Varieties of Composite Text]"
    ]
  ]
  element TEI {
    (teiHeader,
     ((model.resource+, TEI*) | TEI+))
    >> sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
    >> sch:ns [ prefix = "xs" uri = "http://www.w3.org/2001/XMLSchema" ]
    >> sch:ns [
         prefix = "rng"
         uri = "http://relaxng.org/ns/structure/1.0"
       ],
    att.global.attributes,
    att.typed.attributes,
    
    ## specifies the version number of the TEI Guidelines against which this document is valid.
    attribute version {
      xsd:token { pattern = "[\d]+(\.[\d]+){0,2}" }
    }?,
    empty
  }
\text =
  
  ## contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. [4. Default Text Structure 15.1. Varieties of Composite Text]
  element text {
    (model.global*, (body | group), model.global*),
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    att.written.attributes,
    empty
  }
body =
  
  ## (text body) contains the whole body of a single unitary text, excluding any front or back matter. [4. Default Text Structure]
  element body {
    (model.global*,
     (model.divTop, (model.global | model.divTop)*)?,
     (model.divGenLike, (model.global | model.divGenLike)*)?,
     ((model.divLike, (model.global | model.divGenLike)*)+
      | (model.div1Like, (model.global | model.divGenLike)*)+
      | ((model.common, model.global*)+,
         ((model.divLike, (model.global | model.divGenLike)*)+
          | (model.div1Like, (model.global | model.divGenLike)*)+)?)),
     (model.divBottom, model.global*)*),
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
group =
  
  ## contains the body of a composite text, grouping together a sequence of distinct texts (or groups of such texts) which are regarded as a unit for some purpose, for example the collected works of an author, a sequence of prose essays, etc. [4. Default Text Structure 4.3.1. Grouped Texts 15.1. Varieties of Composite Text]
  element group {
    ((model.divTop | model.global)*,
     ((\text | group), (\text | group | model.global)*),
     model.divBottom*),
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
\div =
  
  ## (text division) contains a subdivision of the front, body, or back of a text. [4.1. Divisions of the Body]
  element div {
    ((model.divTop | model.global)*,
     ((((model.divLike | model.divGenLike), model.global*)+
       | ((model.common, model.global*)+,
          ((model.divLike | model.divGenLike), model.global*)*)),
      (model.divBottom, model.global*)*)?)
    >> sch:pattern [
         id =
           "harambee-div-abstractModel-structure-l-constraint-report-11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:div"
           "\x{a}" ~
           "               "
           sch:report [
             test = "ancestor::tei:l"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level structural elements such as div.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "harambee-div-abstractModel-structure-p-constraint-report-12"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:div"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:p or ancestor::tei:ab and not(ancestor::tei:floatingText)"
             "\x{a}" ~
             "        Abstract model violation: p and ab may not contain higher-level structural elements such as div.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.divLike.attributes,
    att.typed.attributes,
    att.declaring.attributes,
    att.written.attributes,
    empty
  }
att.global.facs.attributes = att.global.facs.attribute.facs
att.global.facs.attribute.facs =
  
  ## (facsimile) points to all or part of an image which corresponds with the content of the element.
  attribute facs {
    list { xsd:anyURI+ }
  }?
att.global.change.attributes = att.global.change.attribute.change
att.global.change.attribute.change =
  [
    a:documentation [
      "points to one or more "
      ns1:code [ "<change>" ]
      " elements documenting a state or revision campaign to which the element bearing this attribute and its children have been assigned by the encoder."
    ]
  ]
  attribute change {
    list { xsd:anyURI+ }
  }?
att.coordinated.attributes =
  att.coordinated.attribute.start,
  att.coordinated.attribute.ulx,
  att.coordinated.attribute.uly,
  att.coordinated.attribute.lrx,
  att.coordinated.attribute.lry,
  att.coordinated.attribute.points
att.coordinated.attribute.start =
  
  ## indicates the element within a transcription of the text containing at least the start of the writing represented by this zone or surface.
  attribute start { xsd:anyURI }?
att.coordinated.attribute.ulx =
  
  ## gives the x coordinate value for the upper left corner of a rectangular space.
  attribute ulx {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.coordinated.attribute.uly =
  
  ## gives the y coordinate value for the upper left corner of a rectangular space.
  attribute uly {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.coordinated.attribute.lrx =
  
  ## gives the x coordinate value for the lower right corner of a rectangular space.
  attribute lrx {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.coordinated.attribute.lry =
  
  ## gives the y coordinate value for the lower right corner of a rectangular space.
  attribute lry {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
att.coordinated.attribute.points =
  
  ## identifies a two dimensional area by means of a series of pairs of numbers, each of which gives the x,y coordinates of a point on a line enclosing the area.
  attribute points {
    list {
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      },
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      },
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      },
      xsd:token {
        pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
      }*
    }
  }?
facsimile =
  
  ## contains a representation of some written source in the form of a set of images rather than as transcribed or encoded text. [11.1. Digital Facsimiles]
  element facsimile {
    (model.graphicLike | surface | surfaceGrp)+,
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
sourceDoc =
  
  ## contains a transcription or other representation of a single source document potentially forming part of a dossier génétique or collection of sources. [11.1. Digital Facsimiles 11.2.2. Embedded Transcription]
  element sourceDoc {
    (model.global | model.graphicLike | surface | surfaceGrp)+,
    att.global.attributes,
    att.declaring.attributes,
    empty
  }
surface =
  
  ## defines a written surface as a two-dimensional coordinate space, optionally grouping one or more graphic representations of that space, zones of interest within that space, and transcriptions of the writing within them. [11.1. Digital Facsimiles 11.2.2. Embedded Transcription]
  element surface {
    ((model.global | model.labelLike | model.graphicLike)*,
     ((zone | line | path | surface | surfaceGrp), model.global*)*),
    att.global.attributes,
    att.coordinated.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    
    ## describes the method by which this surface is or was connected to the main surface
    ## Sample values include: 1] glued; 2] pinned; 3] sewn
    attribute attachment {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## indicates whether the surface is attached and folded in such a way as to provide two writing surfaces
    attribute flipping { xsd:boolean }?,
    empty
  }
surfaceGrp =
  
  ## defines any kind of useful grouping of written surfaces, for example the recto and verso of a single leaf, which the encoder wishes to treat as a single unit. [11.1. Digital Facsimiles]
  element surfaceGrp {
    (model.global | surface | surfaceGrp)+,
    att.global.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
zone =
  [
    a:documentation [
      "defines any two-dimensional area within a "
      ns1:code [ "<surface>" ]
      " element. [11.1. Digital Facsimiles 11.2.2. Embedded Transcription]"
    ]
  ]
  element zone {
    (text
     | model.gLike
     | model.graphicLike
     | model.global
     | surface
     | model.linePart)*,
    att.global.attributes,
    att.coordinated.attributes,
    att.typed.attributes,
    att.written.attributes,
    [
      a:defaultValue = "0"
      a:documentation [
        "indicates the amount by which this zone has been rotated clockwise, with respect to the normal orientation of the parent "
        ns1:code [ "<surface>" ]
        " element as implied by the dimensions given in the "
        ns1:code [ "<msDesc>" ]
        " element or by the coordinates of the "
        ns1:code [ "<surface>" ]
        " itself. The orientation is expressed in arc degrees."
      ]
    ]
    attribute rotate { xsd:nonNegativeInteger }?,
    empty
  }
path =
  [
    a:documentation [
      "defines any line passing through two or more points within a "
      ns1:code [ "<surface>" ]
      " element. [11.1. Digital Facsimiles 11.2.2. Embedded Transcription]"
    ]
  ]
  element path {
    empty
    >> sch:pattern [
         id = "harambee-path-pathmustnotbeclosed-constraint-rule-10"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:path[@points]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "firstPair"
             value = "tokenize( normalize-space( @points ), ' ')[1]"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "lastPair"
             value =
               "tokenize( normalize-space( @points ), ' ')[last()]"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "firstX"
             value = "xs:float( substring-before( $firstPair, ',') )"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "firstY"
             value = "xs:float( substring-after( $firstPair, ',') )"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "lastX"
             value = "xs:float( substring-before( $lastPair, ',') )"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "lastY"
             value = "xs:float( substring-after( $lastPair, ',') )"
           ]
           "\x{a}" ~
           "               "
           sch:report [
             test = "$firstX eq $lastX  and  $firstY eq $lastY"
             "The first and\x{a}" ~
             "          last elements of this path are the same. To specify a closed polygon, use\x{a}" ~
             "          the zone element rather than the path element. "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.coordinated.attribute.start,
    att.coordinated.attribute.ulx,
    att.coordinated.attribute.uly,
    att.coordinated.attribute.lrx,
    att.coordinated.attribute.lry,
    att.typed.attributes,
    att.written.attributes,
    
    ## identifies a line within the container or bounding box specified by the parent element by means of a series of two or more pairs of numbers, each of which gives the x,y coordinates of a point on the line.
    attribute points {
      list {
        xsd:token {
          pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
        },
        xsd:token {
          pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
        },
        xsd:token {
          pattern = "(-?[0-9]+(\.[0-9]+)?,-?[0-9]+(\.[0-9]+)?)"
        }*
      }
    }?,
    empty
  }
addSpan =
  [
    a:documentation [
      "(added span of text) marks the beginning of a longer sequence of text added by an author, scribe, annotator or corrector (see also "
      ns1:code [ "<add>" ]
      "). [11.3.1.4. Additions and Deletions]"
    ]
  ]
  element addSpan {
    empty
    >> sch:pattern [
         id = "harambee-addSpan-spanTo-constraint-assert-9"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "harambee-addSpan-spanTo_fr-constraint-assert-10"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.placement.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    att.dimensions.attributes,
    empty
  }
damage =
  
  ## contains an area of damage to the text witness. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element damage {
    macro.paraContent,
    att.global.attributes,
    att.typed.attributes,
    att.damaged.attributes,
    empty
  }
damageSpan =
  
  ## (damaged span of text) marks the beginning of a longer sequence of text which is damaged in some way but still legible. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element damageSpan {
    empty
    >> sch:pattern [
         id = "harambee-damageSpan-spanTo-constraint-assert-11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "\x{a}" ~
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "harambee-damageSpan-spanTo_fr-constraint-assert-12"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.damaged.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    empty
  }
delSpan =
  
  ## (deleted span of text) marks the beginning of a longer sequence of text deleted, marked as deleted, or otherwise signaled as superfluous or spurious by an author, scribe, annotator, or corrector. [11.3.1.4. Additions and Deletions]
  element delSpan {
    empty
    >> sch:pattern [
         id = "harambee-delSpan-spanTo-constraint-assert-13"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "harambee-delSpan-spanTo_fr-constraint-assert-14"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    att.dimensions.attributes,
    empty
  }
ex =
  
  ## (editorial expansion) contains a sequence of letters added by an editor or transcriber when expanding an abbreviation. [11.3.1.2. Abbreviation and Expansion]
  element ex {
    macro.xtext,
    att.global.attributes,
    att.editLike.attributes,
    att.dimensions.attributes,
    empty
  }
fw =
  
  ## (forme work) contains a running head (e.g. a header, footer), catchword, or similar material appearing on the current page. [11.6. Headers, Footers, and Similar Matter]
  element fw {
    macro.phraseSeq,
    att.global.attributes,
    att.typed.attribute.subtype,
    att.placement.attributes,
    att.written.attributes,
    
    ## classifies the material encoded according to some useful typology.
    attribute type {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
handNotes =
  [
    a:documentation [
      "contains one or more "
      ns1:code [ "<handNote>" ]
      " elements documenting the different hands identified within the source texts. [11.3.2.1. Document Hands]"
    ]
  ]
  element handNotes { att.global.attributes, empty }
handShift =
  
  ## marks the beginning of a sequence of text written in a new hand, or the beginning of a scribal stint. [11.3.2.1. Document Hands]
  element handShift {
    empty,
    att.global.attributes,
    att.handFeatures.attributes,
    [
      a:documentation [
        "indicates a "
        ns1:code [ "<handNote>" ]
        " element describing the hand concerned."
      ]
    ]
    attribute new { xsd:anyURI }?,
    empty
  }
am =
  
  ## (abbreviation marker) contains a sequence of letters or signs present in an abbreviation which are omitted or replaced in the expanded form of the abbreviation. [11.3.1.2. Abbreviation and Expansion]
  element am {
    (text | model.gLike | model.pPart.transcriptional)*,
    att.global.attributes,
    att.typed.attributes,
    att.editLike.attributes,
    empty
  }
restore =
  
  ## indicates restoration of text to an earlier state by cancellation of an editorial or authorial marking or instruction. [11.3.1.6. Cancellation of Deletions and Other Markings]
  element restore {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.dimensions.attributes,
    empty
  }
space =
  
  ## indicates the location of a significant space in the text. [11.5.1. Space]
  element space {
    (model.descLike | model.certLike)*,
    att.global.attribute.xmlid,
    att.global.attribute.n,
    att.global.attribute.xmllang,
    att.global.attribute.xmlbase,
    att.global.attribute.xmlspace,
    att.global.rendition.attribute.rend,
    att.global.rendition.attribute.style,
    att.global.rendition.attribute.rendition,
    att.global.linking.attribute.corresp,
    att.global.linking.attribute.synch,
    att.global.linking.attribute.sameAs,
    att.global.linking.attribute.copyOf,
    att.global.linking.attribute.next,
    att.global.linking.attribute.prev,
    att.global.linking.attribute.exclude,
    att.global.linking.attribute.select,
    att.global.facs.attribute.facs,
    att.global.change.attribute.change,
    att.global.responsibility.attribute.cert,
    att.global.source.attribute.source,
    att.typed.attributes,
    att.dimensions.attributes,
    
    ## (responsible party) (responsible party) indicates the individual responsible for identifying and measuring the space
    attribute resp {
      list { xsd:anyURI+ }
    }?,
    
    ## (dimension) indicates whether the space is horizontal or vertical.
    attribute dim {
      
      ## the space is horizontal.
      "horizontal"
      | 
        ## the space is vertical.
        "vertical"
    }?,
    empty
  }
subst =
  
  ## (substitution) groups one or more deletions with one or more additions when the combination is to be regarded as a single intervention in the text. [11.3.1.5. Substitutions]
  element subst {
    ((model.milestoneLike)+)
    >> sch:pattern [
         id = "harambee-subst-substContents1-constraint-assert-15"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:subst"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "child::tei:add and child::tei:del"
             "\x{a}" ~
             "                  "
             sch:name [ ]
             " must have at least one child add and at least one child del"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.global.attributes,
    att.transcriptional.attributes,
    att.dimensions.attributes,
    empty
  }
substJoin =
  
  ## (substitution join) identifies a series of possibly fragmented additions, deletions or other revisions on a manuscript that combine to make up a single intervention in the text [11.3.1.5. Substitutions]
  element substJoin {
    (model.descLike | model.certLike)*,
    att.global.attributes,
    att.pointing.attributes,
    att.transcriptional.attributes,
    att.dimensions.attributes,
    empty
  }
supplied =
  
  ## signifies text supplied by the transcriber or editor for any reason; for example because the original cannot be read due to physical damage, or because of an obvious omission by the author or scribe. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element supplied {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.dimensions.attributes,
    
    ## one or more words indicating why the text has had to be supplied, e.g. overbinding, faded-ink, lost-folio, omitted-in-original.
    attribute reason {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
surplus =
  
  ## marks text present in the source which the editor believes to be superfluous or redundant. [11.3.3.1. Damage, Illegibility, and Supplied Text]
  element surplus {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.dimensions.attributes,
    
    ## one or more words indicating why this text is believed to be superfluous, e.g. repeated, interpolated etc.
    attribute reason {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
secl =
  
  ## (secluded text) Secluded. Marks text present in the source which the editor believes to be genuine but out of its original place (which is unknown). [11.3.1.7. Text Omitted from or Supplied in the Transcription]
  element secl {
    macro.paraContent,
    att.global.attributes,
    att.editLike.attributes,
    att.dimensions.attributes,
    
    ## one or more words indicating why this text has been secluded, e.g. interpolated etc.
    attribute reason {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    }?,
    empty
  }
line =
  
  ## contains the transcription of a topographic line in the source document [11.2.2. Embedded Transcription]
  element line {
    (text | model.global | model.gLike | model.linePart)*,
    att.typed.attributes,
    att.global.attributes,
    att.coordinated.attributes,
    att.written.attributes,
    empty
  }
listTranspose =
  
  ## supplies a list of transpositions, each of which is indicated at some point in a document typically by means of metamarks. [11.3.4.5. Transpositions]
  element listTranspose {
    (desc*, transpose+), att.global.attributes, empty
  }
metamark =
  
  ## contains or describes any kind of graphic or written signal within a document the function of which is to determine how it should be read rather than forming part of the actual content of the document. [11.3.4.2. Metamarks]
  element metamark {
    macro.specialPara,
    att.spanning.attributes,
    att.placement.attributes,
    att.global.attributes,
    
    ## describes the function (for example status, insertion, deletion, transposition) of the metamark.
    attribute function {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    
    ## identifies one or more elements to which the metamark applies.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
mod =
  
  ## represents any kind of modification identified within a single document. [11.3.4.1. Generic Modification]
  element mod {
    macro.paraContent,
    att.global.attributes,
    att.transcriptional.attributes,
    att.typed.attributes,
    att.spanning.attributes,
    att.dimensions.attributes,
    empty
  }
redo =
  
  ## indicates one or more cancelled interventions in a document which have subsequently been marked as reaffirmed or repeated. [11.3.4.4. Confirmation, Cancellation, and Reinstatement of Modifications]
  element redo {
    empty,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    att.dimensions.attributes,
    
    ## points to one or more elements representing the interventions which are being reasserted.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
retrace =
  
  ## contains a sequence of writing which has been retraced, for example by over-inking, to clarify or fix it. [11.3.4.3. Fixation and Clarification]
  element retrace {
    macro.paraContent,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    att.dimensions.attributes,
    empty
  }
transpose =
  
  ## describes a single textual transposition as an ordered list of at least two pointers specifying the order in which the elements indicated should be re-combined. [11.3.4.5. Transpositions]
  element transpose { att.global.attributes, empty }
undo =
  
  ## indicates one or more marked-up interventions in a document which have subsequently been marked for cancellation. [11.3.4.4. Confirmation, Cancellation, and Reinstatement of Modifications]
  element undo {
    empty,
    att.global.attributes,
    att.spanning.attributes,
    att.transcriptional.attributes,
    att.dimensions.attributes,
    
    ## points to one or more elements representing the interventions which are to be reverted or undone.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
start = TEI
